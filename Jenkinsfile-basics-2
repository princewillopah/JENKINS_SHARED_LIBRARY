
def gv
CODE_CHANGES = getGitChanges()
tools {
    maven 'my-mvn'
    gradle 'my-gdl'
    jdk 'jdk17'
}
pipeline {
    agent any
    parameters {
        booleanParam(name: 'RUN_DEPLOY', defaultValue: false, description: 'Run deployment')
    }
    environment {
        DEPLOY_ENV = 'production'
        SKIP_TESTS = 'true'
        NEW_VERSION = versioningFunction() // some grovy script
        AWS_ACCESS = credentials("programantical_access")
    }

    stages {
        stage("init") {  // this stage prepare/load the groovy functions in script.groovy file here
            steps {
                script {
                    gv = load "Basics/script2.groovy"
                }
            }
        }
        stage('Checkout Code') {
            
            steps {
                 echo "cloning repo to jenkins"
                 git 'https://github.com/princewillopah/JENKINS_SHARED_LIBRARY.git'
            }
        }
        stage("build jar") {
            when {
                expression{
                    BRANCE_NAME == 'dev' && CODE_CHANGE == true
                    // BRANCE_NAME == 'dev' || BRANCE_NAME == "master"
                }
                not {
                    environment name: 'SKIP_TESTS', value: 'true'
                }
            }
            steps {
                script {
                    echo "building new version ${NEW_VERSION} jar file"
                    gv.buildJar()
                }
            }
        }
        stage("build image") {
            when {
                expression {
                    return params.RUN_DEPLOY
                }
            }
            steps {
                script {
                    echo "building image"
                    gv.buildImage()
                }
            }
        }
        stage("deploy") {
            when {

                // allOf {
                //     environment name: 'DEPLOY_ENV', value: 'production'
                //     expression {
                //         return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                //     }
                // }
            }
            steps {
                script {
                    echo "deploying"
                    gv.deployApp()
                }
            }
        }
    }// end stage

    post {
        always {
            echo 'This will always run.'
        }
        success {
            echo 'This will run only if the build succeeds.'
        }
        failure {
            echo 'This will run only if the build fails.'
        }
        unstable {
            echo 'This will run if the build is marked unstable.'
        }
        aborted {
            echo 'This will run if the build is aborted.'
        }
        changed {
            echo 'This will run if the build status has changed compared to the last build.'
        }
    } // end post



} //end pipeline






//  stage('Build & Tag Docker Image') {
//                 steps {
//                     script {
//                         withDockerRegistry(credentialsId: 'DockerHub-Credentials', toolName: 'my-docker') {
//                         sh "docker build -t princewillopah/boardgame:latest ."
//                         }
//                     }
//                 }
//              }